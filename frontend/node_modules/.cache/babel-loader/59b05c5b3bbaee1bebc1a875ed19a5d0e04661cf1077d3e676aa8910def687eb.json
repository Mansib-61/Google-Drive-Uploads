{"ast":null,"code":"var _jsxFileName = \"D:\\\\Spring Boot Project\\\\DriveUpload\\\\uploadImageToGoogleDrive-react-java\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [resultMessage, setResultMessage] = useState(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(null); // For single uploaded image URL\n  const [uploadedImages, setUploadedImages] = useState([]); // For list of uploaded images\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  // Handle image upload\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setResultMessage({\n        type: \"error\",\n        message: \"No file selected!\"\n      });\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", selectedFile);\n      const response = await fetch(\"http://localhost:5050/api/images/uploadToGoogleDrive\", {\n        method: \"POST\",\n        body: formData\n      });\n      const result = await response.json();\n      if (response.status === 200) {\n        setUploadedImageUrl(result.url); // Store the uploaded image URL\n        setResultMessage({\n          type: \"success\",\n          message: \"Image uploaded successfully!\"\n        });\n      } else {\n        setResultMessage({\n          type: \"error\",\n          message: \"Failed to upload image\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error uploading image:\", error.message);\n      setResultMessage({\n        type: \"error\",\n        message: error.message\n      });\n    }\n    setTimeout(() => setResultMessage(null), 5000); // Clear the message after 5 seconds\n  };\n\n  // Fetch and display all uploaded images\n  const handleShowImages = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5050/api/images/getUploadedImages\");\n      const images = await response.json();\n      setUploadedImages(images); // Store all uploaded images\n    } catch (error) {\n      console.error(\"Error fetching images:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [resultMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: resultMessage.type === \"success\" ? `Success: ${resultMessage.message}` : `Error: ${resultMessage.message}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !selectedFile,\n      children: \"Upload Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), uploadedImageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Uploaded Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: uploadedImageUrl,\n        alt: \"Uploaded\",\n        style: {\n          width: \"300px\",\n          marginTop: \"20px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowImages,\n      style: {\n        marginTop: \"20px\"\n      },\n      children: \"Show Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), uploadedImages.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Uploaded Images:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        },\n        children: uploadedImages.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: `Uploaded ${index}`,\n          style: {\n            width: \"150px\",\n            margin: \"10px\"\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vwQsXhfgfaeW4oOeMRDbr7HeOjM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","resultMessage","setResultMessage","uploadedImageUrl","setUploadedImageUrl","uploadedImages","setUploadedImages","handleFileChange","e","target","files","handleUpload","type","message","formData","FormData","append","response","fetch","method","body","result","json","status","url","error","console","setTimeout","handleShowImages","images","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","onClick","disabled","src","alt","style","width","marginTop","length","display","flexWrap","map","image","index","margin","_c","$RefreshReg$"],"sources":["D:/Spring Boot Project/DriveUpload/uploadImageToGoogleDrive-react-java/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst App = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [resultMessage, setResultMessage] = useState(null);\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(null); // For single uploaded image URL\n  const [uploadedImages, setUploadedImages] = useState([]); // For list of uploaded images\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    setSelectedFile(e.target.files[0]);\n  };\n\n  // Handle image upload\n  const handleUpload = async () => {\n    if (!selectedFile) {\n      setResultMessage({ type: \"error\", message: \"No file selected!\" });\n      return;\n    }\n\n    try {\n      const formData = new FormData();\n      formData.append(\"image\", selectedFile);\n\n      const response = await fetch(\"http://localhost:5050/api/images/uploadToGoogleDrive\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      const result = await response.json();\n\n      if (response.status === 200) {\n        setUploadedImageUrl(result.url); // Store the uploaded image URL\n        setResultMessage({ type: \"success\", message: \"Image uploaded successfully!\" });\n      } else {\n        setResultMessage({ type: \"error\", message: \"Failed to upload image\" });\n      }\n    } catch (error) {\n      console.error(\"Error uploading image:\", error.message);\n      setResultMessage({ type: \"error\", message: error.message });\n    }\n\n    setTimeout(() => setResultMessage(null), 5000); // Clear the message after 5 seconds\n  };\n\n  // Fetch and display all uploaded images\n  const handleShowImages = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5050/api/images/getUploadedImages\");\n      const images = await response.json();\n      setUploadedImages(images); // Store all uploaded images\n    } catch (error) {\n      console.error(\"Error fetching images:\", error.message);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {resultMessage && (\n        <div>\n          {resultMessage.type === \"success\"\n            ? `Success: ${resultMessage.message}`\n            : `Error: ${resultMessage.message}`}\n        </div>\n      )}\n\n      <h1>Image Uploader</h1>\n\n      {/* File Input for Image Upload */}\n      <input type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\n      <button onClick={handleUpload} disabled={!selectedFile}>\n        Upload Image\n      </button>\n\n      {/* Display the Uploaded Image */}\n      {uploadedImageUrl && (\n        <div>\n          <h2>Uploaded Image:</h2>\n          <img\n            src={uploadedImageUrl}\n            alt=\"Uploaded\"\n            style={{ width: \"300px\", marginTop: \"20px\" }}\n          />\n        </div>\n      )}\n\n      {/* Button to Show All Uploaded Images */}\n      <button onClick={handleShowImages} style={{ marginTop: \"20px\" }}>\n        Show Images\n      </button>\n\n      {/* Display All Uploaded Images */}\n      {uploadedImages.length > 0 && (\n        <div>\n          <h2>All Uploaded Images:</h2>\n          <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n            {uploadedImages.map((image, index) => (\n              <img\n                key={index}\n                src={image}\n                alt={`Uploaded ${index}`}\n                style={{ width: \"150px\", margin: \"10px\" }}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChE,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1D;EACA,MAAMa,gBAAgB,GAAIC,CAAC,IAAK;IAC9BR,eAAe,CAACQ,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACZ,YAAY,EAAE;MACjBG,gBAAgB,CAAC;QAAEU,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAE;MAAoB,CAAC,CAAC;MACjE;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEjB,YAAY,CAAC;MAEtC,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sDAAsD,EAAE;QACnFC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,MAAMO,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAEpC,IAAIL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QAC3BnB,mBAAmB,CAACiB,MAAM,CAACG,GAAG,CAAC,CAAC,CAAC;QACjCtB,gBAAgB,CAAC;UAAEU,IAAI,EAAE,SAAS;UAAEC,OAAO,EAAE;QAA+B,CAAC,CAAC;MAChF,CAAC,MAAM;QACLX,gBAAgB,CAAC;UAAEU,IAAI,EAAE,OAAO;UAAEC,OAAO,EAAE;QAAyB,CAAC,CAAC;MACxE;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACZ,OAAO,CAAC;MACtDX,gBAAgB,CAAC;QAAEU,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEY,KAAK,CAACZ;MAAQ,CAAC,CAAC;IAC7D;IAEAc,UAAU,CAAC,MAAMzB,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EAClD,CAAC;;EAED;EACA,MAAM0B,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,oDAAoD,CAAC;MAClF,MAAMW,MAAM,GAAG,MAAMZ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACpChB,iBAAiB,CAACuB,MAAM,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACZ,OAAO,CAAC;IACxD;EACF,CAAC;EAED,oBACEjB,OAAA;IAAKkC,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjB9B,aAAa,iBACZL,OAAA;MAAAmC,QAAA,EACG9B,aAAa,CAACW,IAAI,KAAK,SAAS,GAC7B,YAAYX,aAAa,CAACY,OAAO,EAAE,GACnC,UAAUZ,aAAa,CAACY,OAAO;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CACN,eAEDvC,OAAA;MAAAmC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGvBvC,OAAA;MAAOgB,IAAI,EAAC,MAAM;MAACwB,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAE9B;IAAiB;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClEvC,OAAA;MAAQ0C,OAAO,EAAE3B,YAAa;MAAC4B,QAAQ,EAAE,CAACxC,YAAa;MAAAgC,QAAA,EAAC;IAExD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGRhC,gBAAgB,iBACfP,OAAA;MAAAmC,QAAA,gBACEnC,OAAA;QAAAmC,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBvC,OAAA;QACE4C,GAAG,EAAErC,gBAAiB;QACtBsC,GAAG,EAAC,UAAU;QACdC,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAO;MAAE;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN,eAGDvC,OAAA;MAAQ0C,OAAO,EAAEV,gBAAiB;MAACc,KAAK,EAAE;QAAEE,SAAS,EAAE;MAAO,CAAE;MAAAb,QAAA,EAAC;IAEjE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAGR9B,cAAc,CAACwC,MAAM,GAAG,CAAC,iBACxBjD,OAAA;MAAAmC,QAAA,gBACEnC,OAAA;QAAAmC,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BvC,OAAA;QAAK8C,KAAK,EAAE;UAAEI,OAAO,EAAE,MAAM;UAAEC,QAAQ,EAAE;QAAO,CAAE;QAAAhB,QAAA,EAC/C1B,cAAc,CAAC2C,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC/BtD,OAAA;UAEE4C,GAAG,EAAES,KAAM;UACXR,GAAG,EAAE,YAAYS,KAAK,EAAG;UACzBR,KAAK,EAAE;YAAEC,KAAK,EAAE,OAAO;YAAEQ,MAAM,EAAE;UAAO;QAAE,GAHrCD,KAAK;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIX,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACrC,EAAA,CA3GID,GAAG;AAAAuD,EAAA,GAAHvD,GAAG;AA6GT,eAAeA,GAAG;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}